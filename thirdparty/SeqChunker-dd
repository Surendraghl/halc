#!/bin/bash

##----------------------------------------------------------------------------##
# Author: Thomas Hackl, thomas.hackl@uni-wuerzburg.de
# Last Modified: Thomas Hackl, 2013-08-20
# Version 0.14


##----------------------------------------------------------------------------##
## TODO
# BUGS
#  non known

# FEATURES
#  stdin - problem: cannot autocompute...
#  rand - if possible with seed to allow for consistent recomputation

##----------------------------------------------------------------------------##
## CHANGELOG

## 0.14
# BugFix: stable chunk size which allow skipping by byte sizes only
#  ADJUST_CHUNK_SIZE=${#SED} + 1 : bash variables dont store trailing newlines, 
#  missing bytes
# BugFix: --version now also documented feature
# Feature: Fatal exception if CHUNK_SIZE_REAL < 0 => chunk size to small for 
#  given records

## 0.13
# major refactoring to better support stepwise chunk maths and FASTA/FASTQ
# BugFix: empty newline at eof of last chunk
# Feature: --version
# added tests (test.sh)

## 0.12
# removed chunk-ratio
# reverted to integer arithmetics
# autocompute chunk number

## 0.11
# CHUNK_STEP: experimental
# LC_ALL instead of LC_NUMERIC

## 0.10
# initial script





##----------------------------------------------------------------------------##
# Variable defaults
DEBUG=1;

CHUNK_NUM=0;

CHUNK_SIZE=0;
CHUNK_FIRST=1
CHUNK_LAST=0
CHUNK_STEP=1
CHUNK_STEP_NUM=1

OUT="";
OUT_SPLIT=0;
MAX_BLOCK_SIZE=1000000;

SED_FASTA='/^>/{p;Q}'; # with -n, prints only matching line with, 
#  else prints all previous lines + matching line

SED_FIRST_FASTQ='/^@/ { # if ^@
                N # read a second line
                /\n@/ { s/^@.*\n// ; N} # remove first line and read another
                N;N;p;q; # read two more lines, print and quit
        }'

SED_LAST_FASTQ='/^@/ { # if ^@
                N # read a second line
                /\n@/ { N } # read additonal line if second is head
                N;N;q; # read two more lines, print and quit
        }'

PRINTF_DEBUG="  %-10s %10s : '%s'\n";

##----------------------------------------------------------------------------##
# Subs

show_usage()
{
    echo "Usage: SeqChunker --chunk-number/--chunk-size INT [OPTIONS ...] FILE1 FILE2 ..."
}

show_help()
{
    show_usage
    cat <<EOF

SeqChunker efficiently samples and outputs chunks from FASTA and FASTQ files, 
 e.g. to serve as on-the-fly input for other tools. 

Required: Either one of the following, but not both at the same time. The unset
 parameter is computed respectively.

  -n/--chunk-number       Total number of chunks to be sampled (including 
                          skipped ones).
  -s/--chunk-size         Size of chunks to be sampled. Supports suffixes "k,M,G".
  
Optional:
   
  -f/--first-chunk        Skip chunks before this chunk [$CHUNK_FIRST]
  -l/--last-chunk         Last after this chunk (including skipped ones) [$CHUNK_LAST]
  -x/--chunk-step         Output a chunk every -x chunks [$CHUNK_STEP]
  -y/--chunks-per-step    Output -y chunks every -x chunks. Cannot be greater 
                          than -x [$CHUNK_PER_STEP] 

  -o/--out                Output filename. To split chunks into individual files
                          provide a "printf" style pattern, e.g. "chunk%02d.fa",
                          with a substitution for the chunk counter.
  -m/--max-block-size     Maximum size of blocks in output stream [$MAX_BLOCK_SIZE]
  -q/--quiet              Suppress non-critical messages
  -V/--version            Version of the script.
  -d/--debug              Output more verbose messages
  -h/--help               Show this help screen

NOTE: Chunk sizes need to be at least twice as great as the longest record in 
 the file. Otherwise results will be inconsistent.

NOTE: Chunk related computations are run each input file individually.

  
  # output only even numbered chunks
  SeqChunker --chunk-size 5M --chunk-first 2 --chunk-step 2 my.fa
  
  # Split file in 100 individual files of similar size
  SeqChunker --chunk-number 100 --out "my.%03d.fa" my.fa

EOF
}

# hr_to_byte <bytes with suffix>
# convert suffixed byte number to full byte number, e.g. 1k to 1024 (byte)
hr_to_byte()
{
    if [[ $1 =~ ^[0-9]+$ ]] ; then
        echo -n $1;    
    elif [[ $1 =~ ^[0-9]+[kMG]$ ]] ; then
        echo  ${1:-1} ${1: -1} | awk '{printf("%d", $1 * 1024^index("kMG", $2))}'
    else
        echo "'$1' not an valid input" 1>&2;
        exit 1;
    fi;
}

# out_split_descriptor
# relay file_descriptor '3' to new chunkwise outfile
out_split_descriptor()
{
    OUT_CHUNK=$(printf $OUT $I);
    eval "exec 3>$OUT_CHUNK";
}

# chunk_out_core
# copy a chunks core (fixed size) using dd to output
chunk_core_out()
{
    # chunk core
    CHUNK_SIZE_REAL=$(( $CHUNK_SIZE - $CHUNK_SIZE_ADJUST ))
    if [ $CHUNK_SIZE_REAL -lt 0 ]; then
        echo "--chunk-size to small for records" 1>&2;
        exit 1;
    fi;
    
    if [ $DEBUG -gt 1 ]; then
    	printf "$PRINTF_DEBUG" "CHUNK" "[$CHUNK_SIZE]" "$(($CHUNK_SIZE_REAL + $CHUNK_SIZE_ADJUST)) = $CHUNK_SIZE_REAL + $CHUNK_SIZE_ADJUST" 1>&2;
    	printf "$PRINTF_DEBUG" "CHUNK_REAL" "[$CHUNK_SIZE_REAL]" "--content hidden--"  1>&2;
    fi;
    
    # one ore multiple dd blocks
    if [ $CHUNK_SIZE_REAL -gt $MAX_BLOCK_SIZE ]; then
        BLOCK_COUNT=$(( $CHUNK_SIZE_REAL / $MAX_BLOCK_SIZE ))
        BLOCK_REST=$(( $CHUNK_SIZE_REAL % $MAX_BLOCK_SIZE ))
        [ $DEBUG -gt 1 ] && (
            echo BLOCK_COUNT=$BLOCK_COUNT 1>&2;
            echo BLOCK_REST=$BLOCK_REST 1>&2;
        )

	dd bs=$MAX_BLOCK_SIZE count=$BLOCK_COUNT 1>&3 2>/dev/null;
	dd bs=$BLOCK_REST count=1 1>&3 2>/dev/null;
        
    elif [ $CHUNK_SIZE_REAL -gt 0 ]; then
        
        dd bs=$CHUNK_SIZE_REAL count=1 1>&3 2>/dev/null;
        
    fi;
}

# chunk_skip_core
# skip a chunks core (fixed size) using dd
chunk_core_skip()
{
    # chunk core
    CHUNK_SIZE_REAL=$(( $CHUNK_SIZE - $CHUNK_SIZE_ADJUST ))
    if [ $CHUNK_SIZE_REAL -lt 0 ]; then
        echo "--chunk-size to small for records" 1>&2;
        exit 1;
    fi;
    
    if [ $DEBUG -gt 1 ]; then
    	printf "$PRINTF_DEBUG" "CHUNK" "[$CHUNK_SIZE]" "$(($CHUNK_SIZE_REAL + $CHUNK_SIZE_ADJUST)) = $CHUNK_SIZE_REAL + $CHUNK_SIZE_ADJUST" 1>&2; 
    	printf "$PRINTF_DEBUG" "CHUNK_REAL" "[$CHUNK_SIZE_REAL]" "--content hidden--"  1>&2;
    fi;
    # one ore multiple dd blocks
    if [ $CHUNK_SIZE_REAL -gt $MAX_BLOCK_SIZE ]; then
        BLOCK_COUNT=$(( $CHUNK_SIZE_REAL / $MAX_BLOCK_SIZE ))
        BLOCK_REST=$(( $CHUNK_SIZE_REAL % $MAX_BLOCK_SIZE ))
        [ $DEBUG -gt 1 ] && (
            echo BLOCK_COUNT=$BLOCK_COUNT 1>&2;
            echo BLOCK_REST=$BLOCK_REST 1>&2;
        )

        dd bs=$MAX_BLOCK_SIZE skip=$BLOCK_COUNT count=0 2>/dev/null;
        dd bs=$BLOCK_REST skip=1 count=0 2>/dev/null;
        
    elif [ $CHUNK_SIZE_REAL -gt 0 ]; then
        
        dd bs=$CHUNK_SIZE_REAL skip=1 count=0 2>/dev/null;
        
    fi;
}

# chunk_out_fasta
# process a chunk in fasta format
chunk_fasta()
{
    [ $DEBUG -gt 1 ] && echo "#$I" 1>&2;
    
    # relay file descriptor if necessary
    [ $SKIP -eq 0 ] && [ $OUT_SPLIT -eq 1 ] && out_split_descriptor;

    # check cache
    if [ ! -z "$HEAD" ]; then
        if [ $DEBUG -gt 1 ]; then
            printf "$PRINTF_DEBUG" "HEAD (c)" "[${#HEAD}]" "$HEAD"  1>&2;
        fi;
	[ $SKIP -eq 0 ] && echo "$HEAD" 1>&3;    
        
        # get first record
    else
        SED=$(sed --unbuffered -e "$SED_FASTA");

        TAIL="${SED%>*}";
        HEAD="${SED:${#TAIL}}";
        CHUNK_SIZE_ADJUST=$(( ${#SED} + 1 )); # number of bytes read, but not outputted

        # eof
	if [ -z "$HEAD" ]; then
	    # sometimes last chunk is empty -> remove
	    if [ -n "$OUT_CHUNK" ] && [ ! -s "$OUT_CHUNK" ]; then
		$(rm "$OUT_CHUNK");
	    fi;
	    [ $DEBUG -gt 1 ] && echo "EOF" 1>&2;
	    return 1; # return on eof
	fi;
	
        
        [ $SKIP -eq 0 ] && echo "$HEAD" 1>&3;    
        
	if [ $DEBUG -gt 1 ]; then
	    printf "$PRINTF_DEBUG" "SED (f)" "[${#SED}]" "$SED"  1>&2;
	    printf "$PRINTF_DEBUG" "TAIL (f)" "[${#TAIL}]" "$TAIL"  1>&2;
	    printf "$PRINTF_DEBUG" "HEAD (f)" "[${#HEAD}]" "$HEAD"  1>&2;
    	fi;
    fi;
    
    
    # output core
    if [ $SKIP -eq 1 ]; then
        chunk_core_skip
    else
        chunk_core_out
    fi;
    
    # handle the final record of the chunk - needs to be complete
    # last record -search for start of next record
    SED=$(sed --unbuffered -e "$SED_FASTA");
    # this many bytes have been read, but not yet outputted
    CHUNK_SIZE_ADJUST=$(( ${#SED} + 1 ));
    
    # remove next FASTA record identifier, if present
    if [ -z "$SED" ]; then # eof with dd
        HEAD=''
        TAIL=''
    else
        TAIL="${SED%>*}";
        if [ ${#TAIL} -eq ${#SED} ]; then # eof in sed
	    HEAD=''
            [ $SKIP -eq 0 ] && echo "$TAIL" 1>&3; # echo tail with '\n'
	else
	    HEAD="${SED:${#TAIL}}";
	    [ $SKIP -eq 0 ] && echo -n "$TAIL" 1>&3; # echo tail "as is"
	fi;
    fi;
    
    if [ $DEBUG -gt 1 ]; then
        printf "$PRINTF_DEBUG" "SED" "[${#SED}]" "$SED"  1>&2;
        printf "$PRINTF_DEBUG" "TAIL" "[${#TAIL}]" "$TAIL"  1>&2;
        printf "$PRINTF_DEBUG" "HEAD" "[${#HEAD}]" "$HEAD"  1>&2;
    fi;
    
    return 0
}

# chunk_fastq 
# process a chunk in fastq format
chunk_fastq()
{
    [ $DEBUG -gt 1 ] && echo "#$I" 1>&2;
    
    # relay file descriptor if necessary
    [ $SKIP -eq 0 ] && [ $OUT_SPLIT -eq 1 ] && out_split_descriptor;
    
    # check cache
    if [ ! -z "$HEAD" ]; then
        if [ $DEBUG -gt 1 ]; then
            printf "$PRINTF_DEBUG" "HEAD (c)" "[${#HEAD}]" "$HEAD"  1>&2;
        fi;
        [ $SKIP -eq 0 ] && echo "$HEAD" 1>&3;    
        # get first record
    else
        SED=$(sed --unbuffered -n -e "$SED_FIRST_FASTQ");

        TAIL="${SED%@*$'\n'*$'\n'+$'\n'*}" # remove entire record
        HEAD="${SED:${#TAIL}}";
        CHUNK_SIZE_ADJUST=$(( ${#SED} + 1 ));

        # eof
        if [ -z "$HEAD" ]; then
            # sometimes last chunk is empty -> remove
            if [ -n "$OUT_CHUNK" ] && [ ! -s "$OUT_CHUNK" ]; then
                $(rm "$OUT_CHUNK");
            fi;
            [ $DEBUG -gt 1 ] && echo "EOF" 1>&2;
            return 1; # return on eof
        fi;
        
        
        [ $SKIP -eq 0 ] && echo "$HEAD" 1>&3;    
        
        if [ $DEBUG -gt 1 ]; then
            printf "$PRINTF_DEBUG" "SED (f)" "[${#SED}]" "$SED"  1>&2;
            printf "$PRINTF_DEBUG" "TAIL (f)" "[${#TAIL}]" "$TAIL"  1>&2;
            printf "$PRINTF_DEBUG" "HEAD (f)" "[${#HEAD}]" "$HEAD"  1>&2;
        fi;
    fi;
    
    # output core
    if [ $SKIP -eq 1 ]; then
        chunk_core_skip
    else
        chunk_core_out
    fi;    
    
    # handle the final record of the chunk - needs to be complete
    # last record -search for start of next record
    SED=$(sed --unbuffered -e "$SED_LAST_FASTQ");
    # this many bytes have been read, but not yet outputted
    CHUNK_SIZE_ADJUST=$(( ${#SED} + 1 ));
    
    if [ -z "$SED" ]; then # eof with dd
        HEAD=''
        TAIL=''
    else
        # remove next FASTQ record, if present
        TAIL="${SED%@*$'\n'*$'\n'+$'\n'*}" # remove entire record
        if [ ${#TAIL} -eq ${#SED} ]; then # eof in sed, no complete new record available
            HEAD=''
            [ $SKIP -eq 0 ] && echo "$TAIL" 1>&3; # echo tail with '\n'
        else
            HEAD="${SED:${#TAIL}}";
            [ $SKIP -eq 0 ] && echo -n "$TAIL" 1>&3; # echo tail "as is"
        fi;
    fi;
    
    if [ $DEBUG -gt 1 ]; then
        printf "$PRINTF_DEBUG" "SED" "[${#SED}]" "$SED"  1>&2;
        printf "$PRINTF_DEBUG" "TAIL" "[${#TAIL}]" "$TAIL"  1>&2;
        printf "$PRINTF_DEBUG" "HEAD" "[${#HEAD}]" "$HEAD"  1>&2;
    fi;
    
    return 0
}


##----------------------------------------------------------------------------##
# Opts/Args

# Execute getopt
ARGS=`getopt --name "SeqChunker" \
    --options "n:s:f:l:x:y:o:m:qdhV" \
    --longoptions "chunk-number:,chunk-size:,first-chunk:,last-chunk:,chunk-step:,chunks-per-step:,out:,max-block-size:,quiet,debug,help,version" \
    -- "$@"`

#Bad arguments
[ $? -ne 0 ] && exit 1;

# A little magic
eval set -- "$ARGS"

# Now go through all the options
while true; do
    case "$1" in
        -n|--chunk-number)
            [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1);
            if [[ "$2" =~ [^0-9] ]]; then
                echo "$1: '$2' not an INT" 1>&2;
                exit 1;
            fi;
            CHUNK_NUM=$2;
            shift 2;;

        -s|--chunk-size)
            [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1);
            CHUNK_SIZE=$(hr_to_byte $2);
            [ $? -gt 0 ] && exit 1;
            shift 2;;

        -f|--first-chunk)
            [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1);
            if [[ "$2" =~ [^0-9] ]]; then
                echo "$1: '$2' not an INT" 1>&2;
                exit 1;
            fi;
            CHUNK_FIRST=$2;
            shift 2;;

        -l|--last-chunk)
            [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1);
            if [[ "$2" =~ [^0-9] ]]; then
                echo "$1: '$2' not an INT" 1>&2;
                exit 1;
            fi;
            CHUNK_LAST=$2
            shift 2;;

        -x|--chunk-step)
            [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1);
            if [[ "$2" =~ [^0-9] ]]; then
                echo "$1: '$2' not an INT" 1>&2;
                exit 1;
            fi;
            CHUNK_STEP=$2
            shift 2;;

        -y|--chunks-per-step)
            [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1);
            if [[ "$2" =~ [^0-9] ]]; then
                echo "$1: '$2' not an INT" 1>&2;
                exit 1;
            fi;
            CHUNK_STEP_NUM=$2
            shift 2;;

        -o|--out)
            [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1);
            OUT=$2
            shift 2;;
        
        -m|--max-block-size)
            [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1);
            if [[ "$2" =~ [^0-9] ]]; then
                echo "$1: '$2' not an INT" 1>&2;
                exit 1;
            fi;
            MAX_BLOCK_SIZE=$2
            shift 2;;

        -q|--quiet)
            DEBUG=0
            shift;;

        -d|--debug)
            DEBUG=2
            shift;;
        
	-h|--help)
	    show_help && exit 0;;

        -V|--version)
            grep -m1 'Version' "$0" | sed 's/.*Version\s*//';
            exit 0;;
	
        --)
            shift
            break;;
        *)
            echo "$1: Unknown option" 1>&2 && exit 1;;
    esac
done

# -b|--byte-skip)
#    [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1);
#if [[ "$2" =~ [^0-9] ]]; then
#    echo "$1: '$2' not an INT" 1>&2;
#exit 1;
#fi;
#SKIP=$2
#shift 2;;

# process some args and opts
if [ $# -eq 0 ]; then
    echo "FILE required" 1>&2 
    show_usage
    exit 1
fi;

if [ $CHUNK_SIZE -gt 0 ] && [ $CHUNK_NUM -gt 0 ]; then
    echo "Either --chunk-size or --chunk-number required, not both" 1>&2
    show_usage
    exit 1
fi;

if [ $CHUNK_SIZE -eq 0 ] && [ $CHUNK_NUM -eq 0 ]; then
    echo "Either --chunk-size or --chunk-number required, not both" 1>&2
    show_usage
    exit 1
fi;


# default output file descriptor
if [ -z "$OUT" ] || [ "$OUT" == '-' ]; then
    exec 3>&1;
else
    if [[ $OUT =~ % ]]; then
        # dynamic descriptor for every chunk, no default ...
        OUT_SPLIT=1;
    else
	eval "exec 3>$OUT";
    fi;
fi;

##----------------------------------------------------------------------------##
# Main

# process files
for FILE in $@; do
    
    # determine file size
    FILE_SIZE=$( stat -L -c %s $FILE)
    [ $? -ne 0 ] && exit 1;
    [ $DEBUG -gt 1 ] && echo "FILE_SIZE=$FILE_SIZE" 1>&2;

    # determine format (FASTA/FASTQ)
    IS_FASTQ=$(head -c 1 "$FILE" | sed 's/[^>@]/\!/;s/>/0/;s/@/1/;s/\n//'); 
    if [ "$IS_FASTQ" = "!" ]; then
        echo "FILE neither FASTA nor FASTQ" 1>&2 
        exit 1
    fi;

    # auto-compute chunk-size/chunk-number
    # chunk-size
    if [ $CHUNK_SIZE -eq 0 ]; then
	CHUNK_SIZE=$(( $FILE_SIZE/$CHUNK_NUM +1 ));
    else
	CHUNK_NUM=$(( $FILE_SIZE/$CHUNK_SIZE +1 )); # better safe, lasts on eof anyway
    fi;
    
    [ $CHUNK_LAST -eq 0 ] && CHUNK_LAST=$CHUNK_NUM;
    
    if [ $DEBUG -gt 1 ]; then
	echo "ARGS=$ARGS" 1>&2;
	echo "CHUNK_SIZE=$CHUNK_SIZE" 1>&2;
	echo "CHUNK_NUM=$CHUNK_NUM" 1>&2;
	echo "CHUNK_FIRST=$CHUNK_FIRST" 1>&2;
	echo "CHUNK_LAST=$CHUNK_LAST" 1>&2;
	echo "CHUNK_STEP=$CHUNK_STEP" 1>&2;
	echo "CHUNK_STEP_NUM=$CHUNK_STEP_NUM" 1>&2;
    fi;

    # counter	
    I=1; 
    REC_CACHE="";
    CHUNK_SIZE_ADJUST=0;
    
    (
    	# FASTA
	if [ $IS_FASTQ -eq 0 ]; then
            # skip until CHUNK_FIRST
	    SKIP=1;
	    while [ $I -lt $CHUNK_FIRST ]; do
		#chunk_fasta
		chunk_core_skip
		((I++));
	    done;
	    
            # process until CHUNK_LAST
	    while [ $I -le $CHUNK_LAST ]; do
		if [ $(( ($I - $CHUNK_FIRST) % $CHUNK_STEP)) -lt $CHUNK_STEP_NUM ]; then
		    SKIP=0;
		else
		    SKIP=1;
		fi;

		chunk_fasta
                [ $? -ne 0 ] && break; # eof
    		((I++));
	    done;
	    
	    # FASTQ    
	else
	    # skip until CHUNK_FIRST
            SKIP=1;
	    while [ $I -lt $CHUNK_FIRST ]; do
	        chunk_fastq
	        ((I++));
	    done;
	    
	    # process until CHUNK_LAST
	    while [ $I -le $CHUNK_LAST ]; do
	        if [ $(( ($I - $CHUNK_FIRST) % $CHUNK_STEP)) -lt $CHUNK_STEP_NUM ]; then
	            SKIP=0;
	        else
	            SKIP=1;
	        fi;
	        
                chunk_fastq
                [ $? -ne 0 ] && break; # eof
                ((I++));
            done;
	fi;
	
    ) < "$FILE";
    
done;


